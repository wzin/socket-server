#!/usr/bin/python

'''Initial imports'''
try:
  import SocketServer
except ImportError:
  print 'Please install SocketServer module : sudo easy_install SocketServer'
try:
  import serial
except ImportError:
  print 'Please install serial module : sudo easy_install pySerial'
import sys,time,os
import thread,threading


if sys.argv[1]:
  '''Check whether we specified modem device '''
  serial_modem = sys.argv[1]
  print "Attaching to %s" % serial_modem
  try:
    '''device=<var serial_modem>, baudrate=9600, bytesize=8, parity='N', stopbits=1, timeout=None, '''
    ser = serial.Serial(serial_modem, 9600, 8, 'N', 1)
    pass
  except serial.serialutil.SerialException,error:
    '''If the serial modem is invalid we have to throw an exception '''
    print "Could not attach to serial modem => %s" % error
    raise
else:
  ''' If there's no serial modem given that raise exception '''
  print 'Please provide working serial modem e.g. /dev/ttyUSB0' 
  raise

def safe_signal_send(info,sleeptime,signal): 
    if threadlock.locked():
      print "Resources locked"
      time.sleep(sleeptime)
      threadlock.acquire()
      ser.write(signal)
      threadlock.release()
    else:
      print info
      threadlock.acquire()
      ser.write(signal)
      threadlock.release()

def keepaliver_thread (threadname, sleeptime):
    global ser,threadlock
    while 1:
      if threadlock.locked():
        print "Wanted to send keepalive but resources were locked by command"
      else:
        threadlock.acquire()
        print "%s Sending keepalive to Bulb" % (threadname)
        ser.write('0\r')
        time.sleep(0.2) 
        threadlock.release()
        time.sleep(sleeptime) 



class IphoneRequestHandler(SocketServer.BaseRequestHandler ):
    thread.start_new_thread(keepaliver_thread, ("Keepalive_sender", 10))
    '''Iphone request handler class logic begins here '''
    def setup(self):
        '''Initial greeint sent to client after connection'''
        print self.client_address, 'connected!'
        self.request.send('Hi - this is cesar request handler v.0.1' + str(self.client_address) + '\n')
        self.request.send('---------------------- \n')
        self.request.send('Listening for commands \n')

    def handle(self):
        data = 'dummy'
        while data:
            '''start receiving data from client'''
            data = self.request.recv(1024)
            print "Received from client: %s" % data
            
            if 'lightOnRequest: true' in data.strip() or 'on' in data.strip():
              '''If received 'lightOnRequest: true' letter from iphone, we send command to xbee'''
              safe_signal_send('Sent command to Xbee',0.2,'A\r')
            elif 'lightOnRequest: false' in data.strip() or 'off' in data.strip():
              '''If received 'lightOffRequest: true' letter from iphone, we send command to xbee'''
              safe_signal_send('Sent command to Xbee',0.2,'B\r')
            elif 'exit' in data.strip() or 'shutdown' in data.strip():
              ''' On exit - detach from serial device '''
              self.request.send("Server answer: unknown command" + '\n')
              return
            else:
              print 'Unknown command'
              self.request.send("Server answer: unknown command" + '\n')
    
    def finish(self):
        ''' Some finish routines '''
        print self.client_address, 'disconnected!'
        self.request.send('bye ' + str(self.client_address) + '\n')

try:
  threadlock = thread.allocate_lock()
  ''' Initially turn off the bulb '''
  safe_signal_send('Sent command to Xbee',0.2,'B\r')
  ''' Instantiate server '''
  server = SocketServer.ThreadingTCPServer(('', 31415), IphoneRequestHandler)
  ''' Start the server ''' 
  server.serve_forever() 
  ''' When finished - detach from modem device '''
except KeyboardInterrupt:
  ser.close()
  server.server_close()
  server.shutdown()
  print 'Bye bye :)'
